AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  Create a wordpress installation on the LAMP stack using an EC2 instance

Parameters:
  KeyPairName:
    Description: A KeyPair to enable SSH to the EC2 instance.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: EC2 instance type for the WebServer
    Type: String
    Default: t2.micro
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    ConstraintDescription: Must be a valid EC2 instance type.
  SSHWhiteListIP:
    Description: The IP address range(CIDR) that can be used to SSH to the EC2 instances.
    Type: String
    Default: 0.0.0.0/0
    MinLength: 9
    MaxLength: 18
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
  DBName:
    Description: The WordPress database name.
    Type: String
    Default: wordpressdb
    MinLength: 1
    MaxLength: 64
    AllowedPattern: '[a-zA-Z][a-zA-Z0-0]*'
    ConstraintDescription: Must contain only letter and numbers.
  DBUser:
    NoEcho: 'true'
    Description: The WordPress database admin username
    Type: String
    MinLength: 1
    MaxLength: 16
    AllowedPattern: '[a-zA-Z][a-zA-Z0-0]*'
    ConstraintDescription: Must contain only letter and numbers.
  DBPassword:
    NoEcho: 'true'
    Description: 'The WordPress database admin password'
    Type: String
    MinLength: 8
    MaxLength: 41
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Must contain only alphanumeric characters
  DBRootPassword:
    NoEcho: 'true'
    Description: 'The MYSQL root password'
    Type: String
    MinLength: 8
    MaxLength: 41
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Must contain only alphanumeric characters

Mappings:
  EC2InstanceTypeArchitecture:
    t1.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
  AWSRegionArchAMI:
    us-east-1:
      HVM64: ami-0080e4c5bc078760e
    us-west-2:
      HVM64: ami-01e24be29428c15b2
    us-west-1:
      HVM64: ami-0ec6517f6edbf8044
    eu-west-1:
      HVM64: ami-08935252a36e25f85
    eu-west-2:
      HVM64: ami-01419b804382064e4
    eu-west-3:
      HVM64: ami-0dd7e7ed60da8fb83
    eu-central-1:
      HVM64: ami-0cfbf4f6db41068ac
    eu-north-1:
      HVM64: ami-86fe70f8
    ap-northeast-1:
      HVM64: ami-00a5245b4816c38e6
    ap-northeast-2:
      HVM64: ami-00dc207f8ba6dc919
    ap-northeast-3:
      HVM64: ami-0b65f69a5c11f3522
    ap-southeast-1:
      HVM64: ami-05b3bcf7f311194b3
    ap-southeast-2:
      HVM64: ami-02fd0b06f06d93dfc
    ap-south-1:
      HVM64: ami-0ad42f4f66f6c1cc9
    us-east-2:
      HVM64: ami-0cd3dfa4e37921605
    ca-central-1:
      HVM64: ami-07423fb63ea0a0930
    sa-east-1:
      HVM64: ami-05145e0b28ad8e0b2
    cn-north-1:
      HVM64: ami-053617c9d818c1189
    cn-northwest-1:
      HVM64: ami-0f7937761741dc640

Resources:
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: >-
        Enable HTTP access via port 80 and SSH at 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref SSHWhiteListIP
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHWhiteListIP
  WebServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
      - AWSRegionArchAMI
      - !Ref 'AWS::Region'
      - !FindInMap
        - EC2InstanceTypeArchitecture
        - !Ref InstanceType
        - Arch
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      KeyName: !Ref KeyPairName
    Metadata:
      Instance:
        Description: A sample EC2 instance
  IPAddress:
    Type: AWS::EC2::EIP
  IPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref WebServer
      EIP: !Ref IPAddress

Outputs:
  WebsiteUrl:
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt
          - WebServer
          - PublicDnsName
        - /wordpress
    Description: Wordpress Website URL
  OutputDNS:
    Value:
      !GetAtt WebServer.PublicDnsName
  OutputWebServer:
    Value:
      !Ref WebServer