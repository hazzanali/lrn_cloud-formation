AWSTemplateFormatVersion: "2010-09-09"
Description: >
  CF template to provision VPC, IG, Subnets, NAT gateway and RouteTable.

Parameters:
  ProjectName:
    Description: Project Name to identity stack and infrastructure
    Type: String
  Environment:
    Description: Environment to deploy the stack.
    Type: String
    AllowedValues:
      - Stage
      - Prod
      - Test
      - Dev
  CidrBlock:
    Description: The CIDR block range for your VPC.
    Type: String
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    Default: 10.0.0.0/16
    ConstraintDescription: Invalid CIDR block
  CidrBits:
    Description: The number of subnet bits for the CIDR. Eg, value of "8" will create a mask of /24.
    Type: Number
    Default: 8
    MinValue: 2
    MaxValue: 16
    ConstraintDescription: Invalid CIDR bits
  WhiteListIP:
    Type: String
    Default: "103.104.16.78/32"
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Ref CidrBlock
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}
  
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  
  # Subnets
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
        - 0
        - Fn::Cidr:
          - !Ref CidrBlock
          - 6
          - !Ref CidrBits
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-PublicSubnetA
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
        - 1
        - Fn::Cidr:
          - !Ref CidrBlock
          - 6
          - !Ref CidrBits
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-PublicSubnetB
  
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
        - 2
        - Fn::Cidr:
          - !Ref CidrBlock
          - 6
          - !Ref CidrBits
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-PrivateSubnetA
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
        - 3
        - Fn::Cidr:
          - !Ref CidrBlock
          - 6
          - !Ref CidrBits
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-PrivateSubnetB
  
  DBSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
        - 4
        - Fn::Cidr:
            - !Ref CidrBlock
            - 6
            - !Ref CidrBits
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-DBSubnetA 
  DBSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
        - 5
        - Fn::Cidr:
            - !Ref CidrBlock
            - 6
            - !Ref CidrBits
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-DBSubnetB

  # NAT Gateway
  ElasticIPOne:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  ElasticIPTwo:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  
  NatGatewayOne:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - ElasticIPOne
          - AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-NATGatewayOne
  NatGatewayTwo:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - ElasticIPTwo
          - AllocationId
      SubnetId: !Ref PublicSubnetB
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-NATGatewayTwo

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-PublicRouteTable
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  
  PrivateRouteTableOne:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-PrivateRouteTableOne
  PrivateRouteTableTwo:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-PrivateRouteTableTwo
  PrivateDefaultRouteNatGatewayOne:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayOne
  PrivateDefaultRouteNatGatewayTwo:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayTwo
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTableOne
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTableTwo

  DBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-{Environment}-DBRouteTableOne
  DBSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DBSubnetA
      RouteTableId: !Ref DBRouteTable
  DBSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DBSubnetB
      RouteTableId: !Ref DBRouteTable

  # NACL
  PublicNacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public-NACL

  PublicNaclIngress100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNacl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      CidrBlock: !Ref WhiteListIP
      PortRange:
        From: 22
        To: 22

  PublicNACLEgress100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNacl
      RuleNumber: 100
      Protocol: -1
      Egress: True
      RuleAction: allow
      CidrBlock: 0.0.0.0/0

  PublicNACLIngress200:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNacl
      RuleNumber: 200
      Protocol: 6
      PortRange:
        From: 0
        To: 65535
      RuleAction: allow
      CidrBlock: !Ref CidrBlock

  PublicNACLIngress300:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNacl
      RuleNumber: 300
      Protocol: 6
      PortRange:
        From: 1024
        To: 65535
      RuleAction: allow
      CidrBlock: 0.0.0.0/0

  PrivateNacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private-NACL

  PrivateNACLIngress100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNacl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

  PrivateNACLEgress100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNacl
      RuleNumber: 100
      Protocol: -1
      Egress: True
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535

  DBNacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: DB-NACL

  # Allows private subnet A
  DBNACLIngress100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DBNacl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      CidrBlock: !Select
        - 2
        - Fn::Cidr:
            - !Ref CidrBlock
            - 9
            - !Ref CidrBits
      PortRange:
        From: 5432
        To: 5432

  DBNACLEgress100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DBNacl
      RuleNumber: 100
      Protocol: 6
      Egress: True
      RuleAction: allow
      CidrBlock: !Select
        - 2
        - Fn::Cidr:
            - !Ref CidrBlock
            - 9
            - !Ref CidrBits
      PortRange:
        From: 1024
        To: 65535

  # Allows private subnet B
  DBNACLIngress200:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DBNacl
      RuleNumber: 200
      Protocol: 6
      RuleAction: allow
      CidrBlock: !Select
        - 3
        - Fn::Cidr:
            - !Ref CidrBlock
            - 9
            - !Ref CidrBits
      PortRange:
        From: 5432
        To: 5432
  
  DBNACLEgress200:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DBNacl
      RuleNumber: 200
      Protocol: 6
      Egress: True
      RuleAction: allow
      CidrBlock: !Select
        - 3
        - Fn::Cidr:
            - !Ref CidrBlock
            - 9
            - !Ref CidrBits
      PortRange:
        From: 1024
        To: 65535

  # Associate Subnets and NACLs
  PublicSubnetNaclOne:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      NetworkAclId: !Ref PublicNacl

  PublicSubnetNaclTwo:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      NetworkAclId: !Ref PublicNacl

  PrivateSubnetNaclOne:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      NetworkAclId: !Ref PrivateNacl

  PrivateSubnetNaclTwo:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      NetworkAclId: !Ref PrivateNacl

  DBSubnetNaclOne:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref DBSubnetA
      NetworkAclId: !Ref DBNacl

  DBSubnetNaclTwo:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref DBSubnetB
      NetworkAclId: !Ref DBNacl

  DBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "DB Subnet Group for PDAX's RDS Instances"
      SubnetIds:
        - !Ref DBSubnetA
        - !Ref DBSubnetB
      Tags:
        - Key: "Name"
          Value: !Sub "PDAX ${Environment} RDS Subnet Group"

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Environment}${ProjectName}LambdaSG
      GroupDescription: Allow access to the database
      VpcId: !Ref VPC

Outputs:
  VpcId:
    Value: !Ref VPC
    Export:
      Name: !Sub ${ProjectName}-${Environment}-Vpc
  PublicSubnetA:
    Value: !Ref PublicSubnetA
  PublicSubnetB:
    Value: !Ref PublicSubnetB
  PrivateSubnetA:
    Value: !Ref PrivateSubnetA
  PrivateSubnetB:
    Value: !Ref PrivateSubnetB
  DBSubnetA:
    Value: !Ref DBSubnetA
  DBSubnetB:
    Value: !Ref DBSubnetB
  
  DBSubnetGroup:
    Value: !Ref DBSubnetGroup
    Export:
      Name: !Sub ${ProjectName}-${Environment}-DBSubnetGroup

  LambdaSecurityGroup:
    Value: !Ref LambdaSecurityGroup
    Export:
      Name: !Sub ${ProjectName}-${Environment}-LambdaSecurityGroup

  PublicSubnets:
    Value:
      !Join [",", [!Ref PublicSubnetA, !Ref PublicSubnetB]]
    Export:
      Name: !Sub ${ProjectName}-${Environment}-PublicSubnets

  PrivateSubnets:
    Value:
      !Join [",", [!Ref PrivateSubnetA, !Ref PrivateSubnetB]]
    Export:
      Name: !Sub ${ProjectName}-${Environment}-PrivateSubnets

  DBSubnets:
    Value:
      !Join ["", [!Ref DBSubnetA, !Ref DBSubnetB]]
    Export:
      Name: !Sub ${ProjectName}-${Environment}-DBSubnets